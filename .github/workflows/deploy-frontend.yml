name: Deploy Static Frontend to EC2

on:
  push:
    paths:
      - "frontend/**"
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Node.js 설치
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 3. .env.production 파일 생성 및 의존성 설치, 빌드
      - name: Install dependencies and build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          cd frontend
          # .env.production 파일 생성
          echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}" > .env.production
          # 의존성 설치 및 빌드
          npm install
          npm run build # 정적 파일 빌드 (next build 사용)

      # 4. Create .ssh directory
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      # 5. Add known_hosts
      - name: Add known_hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 6. Deploy to EC2
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USER }}
          KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${KEY}" > key.pem
          chmod 400 key.pem

          # Build 결과물을 EC2 서버로 복사
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" frontend/out/ $USERNAME@$HOST:/var/www/html/frontend/

          # SSH로 EC2 서버에서 추가 작업
          ssh -o StrictHostKeyChecking=no -i key.pem $USERNAME@$HOST "
            # 디렉토리 확인 및 Nginx 재시작
            if [ ! -d /var/www/html/frontend ]; then
              mkdir -p /var/www/html/frontend
            fi

            # PM2 프로세스 환경변수 업데이트
            cd /var/www/html/frontend &&
            pm2 restart frontend-app --update-env || pm2 start npm --name frontend-app -- start
            sudo systemctl restart nginx
          "
          rm key.pem
